options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true; // 解决汉字问题，字符串定义用UNICODE表达
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(BoolExprParser)

package jMID.adapter.expr.javaCC;
import java.util.*;

public class BoolExprParser {

  public static void main(String args[]) throws ParseException {
    BoolExprParser parser = new BoolExprParser(System.in);
    parser.LogicalORExpression();
  }

}

PARSER_END(BoolExprParser)

SKIP : {
    " " | "\t" //| "\n" | "\r"
}

// 整数、浮点数、字符串
TOKEN : {
    <INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])*>
  | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])*>
  | <STRING_LITERAL: "'" (~["'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "'">
} // 解决'a' + 'n' > 1中的'a' + 'n'被解析成一个串的问题

// 标识符、变量名
TOKEN : {
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
  | <VARIABLE: "$" (<IDENTIFIER> | "/")*>
  | <#LETTER: ["A"-"Z","_","a"-"z"]>
  | <#DIGIT: ["0"-"9"]>
}

// 逻辑或
void LogicalORExpression() : {}
{
    LogicalANDExpression() [ "||" LogicalORExpression() ]
}
// 逻辑与
void LogicalANDExpression() : {}
{
    LogicalUnitExpression() [ "&&" LogicalANDExpression() ]
}
// 逻辑单元
void LogicalUnitExpression() : {}
{
    CompareExpression() | "[" LogicalORExpression() "]"
}
// 比较表达式
void CompareExpression() : {}
{
    AdditiveExpression() ( "<" | ">" | "<=" | ">=" | "==" | "!=" ) AdditiveExpression()
}
// 加减表达式
void AdditiveExpression() : {}
{
    MultiplicativeExpression() [ ( "+" | "-" ) AdditiveExpression() ]
}
// 乘除/取模表达式
void MultiplicativeExpression() : {}
{
    PrimaryExpression() [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
}
// 基本表达式，最后的("\n"|"\r")*为应对在回车换行未被处理的情况
void PrimaryExpression() : {}
{
    Constant() | FunctionExpression() | <VARIABLE> | "(" AdditiveExpression() ")" ("\n"|"\r")*
}
// 常量
void Constant() : {}
{
    <INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | <STRING_LITERAL>
}
// 函数调用
void FunctionExpression() : {}
{
    <IDENTIFIER> "(" [ LOOKAHEAD(ArgumentExpressionList()) ArgumentExpressionList() ] ")"
}
// 函数参数列表
void ArgumentExpressionList() : {}
{
    AdditiveExpression() ( "," AdditiveExpression() )*
}